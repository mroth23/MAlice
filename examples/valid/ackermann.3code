
.stack

ackermann:
0x0:  allocate __x_ackermann_97 0 
0x1:  allocate __y_ackermann_97 1 
0x2:  __t0 = 0 
0x3:  __t1 = __x_ackermann_97 == __t0 
0x4:  ifFalse __t1 goto L1 
0x5:  __t2 = 1 
0x6:  __t3 = __y_ackermann_97 + __t2 
0x7:  return __t3 
L0:
0x29:  end ackermann 
L1:
0x9:  __t4 = 0 
0xa:  __t5 = __x_ackermann_97 > __t4 
0xb:  __t6 = 0 
0xc:  __t7 = __y_ackermann_97 == __t6 
0xd:  __t8 = __t5 && __t7 
0xe:  ifFalse __t8 goto L3 
0xf:  __t9 = 1 
0x10:  __t10 = __x_ackermann_97 - __t9 
0x11:  __t11 = 1 
0x12:  param __t10 
0x13:  param __t11 
0x14:  __t12 = call ackermann 2 
0x15:  return __t12 
L3:
0x17:  __t13 = 0 
0x18:  __t14 = __x_ackermann_97 > __t13 
0x19:  __t15 = 0 
0x1a:  __t16 = __y_ackermann_97 > __t15 
0x1b:  __t17 = __t14 && __t16 
0x1c:  ifFalse __t17 goto L0 
0x1d:  __t18 = 1 
0x1e:  __t19 = __x_ackermann_97 - __t18 
0x1f:  __t20 = 1 
0x20:  __t21 = __y_ackermann_97 - __t20 
0x21:  param __x_ackermann_97 
0x22:  param __t21 
0x23:  __t22 = call ackermann 2 
0x24:  param __t19 
0x25:  param __t22 
0x26:  __t23 = call ackermann 2 
0x27:  return __t23 

hatta:
0x2a:  allocate __x_hatta_98 
0x2b:  allocate __y_hatta_98 
0x2c:  allocate __z_hatta_98 
0x2d:  __t24 = "Enter the first number" 
0x2e:  print __t24 
0x2f:  read __x_hatta_98 int 
0x30:  __t25 = "Enter the second number" 
0x31:  print __t25 
0x32:  read __y_hatta_98 int 
0x33:  param __x_hatta_98 
0x34:  param __y_hatta_98 
0x35:  __t26 = call ackermann 2 
0x36:  __z_hatta_98 = __t26 
0x37:  __t27 = "ackermann(" 
0x38:  print __t27 
0x39:  print __x_hatta_98 
0x3a:  __t28 = "," 
0x3b:  print __t28 
0x3c:  print __y_hatta_98 
0x3d:  __t29 = ") = " 
0x3e:  print __t29 
0x3f:  print __z_hatta_98 
0x40:  end hatta 
